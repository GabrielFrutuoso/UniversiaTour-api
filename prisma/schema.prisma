generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

//user model
model User {
  id            String @id @default(uuid())
  username      String
  email         String @unique
  password      String
  avatar        String? @db.VarChar(500)
  bio           String?
  tripInterests String? @db.VarChar(500)
  birthday      String
  role          role @default(USER) 
  activities   activities[]
}

//roles model
enum role {
  USER
  ADMIN
}



//destinies model
model destinies {
  id           Int @id @default(autoincrement())
  state        String
  bestSeason   String @db.VarChar(500) @map("best_season")
  weather      String @db.VarChar(500)
  localMaps    String @db.VarChar(500) @map("local_maps")
  description  String @db.VarChar(2000)
  imageUrl     String @db.VarChar(500) @map("image_url")
  touristics   touristics[]
}

//touristics
model touristics {
  id           Int @id @default(autoincrement())
  location     String
  city         String
  localMaps    String @db.VarChar(500) @map("local_maps")
  description  String @db.VarChar(2000)
  destiniesId  Int @map("destinies_id")
  images       images[]
  activities   activities[]
  destinies    destinies @relation(fields: [destiniesId], references: [id]) 
}

//images
model images {
  id            Int @id @default(autoincrement())
  url           String @db.VarChar(500)
  touristicId   Int @map("touristic_id")
  touristic     touristics @relation(fields: [touristicId], references: [id])
}

model activities {
  id           Int @id @default(autoincrement())
  description  String @db.VarChar(500)
  touristicId  Int @map("touristic_id")
  userId       String @map("user_id")
  touristic    touristics @relation(fields: [touristicId], references: [id])
  user         User @relation(fields: [userId], references: [id])
  }